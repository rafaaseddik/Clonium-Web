{"ast":null,"code":"import _asyncToGenerator from \"/Users/rafaaseddik/Documents/Personal/projects/Clonium-Web/frontend/clonium-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { GameState } from '../../models/game-state.model';\nimport { Player } from '../../models/player.model';\nimport * as _ from 'lodash';\nimport { wait } from '../../utils/time-management';\nimport { nextGameState, playerToGameState } from '../../utils/utilFunctions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/game.service\";\nimport * as i2 from \"../../../core/services/room.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../chat-box/chat-box.component\";\nfunction BoardComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"img\", 15);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.player3Score);\n  }\n}\nfunction BoardComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"img\", 16);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.player4Score);\n  }\n}\nfunction BoardComponent_div_19_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction BoardComponent_div_19_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 26);\n  }\n}\nfunction BoardComponent_div_19_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 27);\n  }\n}\nfunction BoardComponent_div_19_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28);\n  }\n}\nfunction BoardComponent_div_19_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 29);\n  }\n}\nfunction BoardComponent_div_19_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵlistener(\"click\", function BoardComponent_div_19_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const cell_r11 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.increment(cell_r11));\n    });\n    i0.ɵɵtemplate(1, BoardComponent_div_19_div_1_div_1_Template, 1, 0, \"div\", 20);\n    i0.ɵɵtemplate(2, BoardComponent_div_19_div_1_div_2_Template, 1, 0, \"div\", 21);\n    i0.ɵɵtemplate(3, BoardComponent_div_19_div_1_div_3_Template, 1, 0, \"div\", 22);\n    i0.ɵɵtemplate(4, BoardComponent_div_19_div_1_div_4_Template, 1, 0, \"div\", 23);\n    i0.ɵɵtemplate(5, BoardComponent_div_19_div_1_div_5_Template, 1, 0, \"div\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const cell_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"board-cell \" + cell_r11.getPlayer());\n    i0.ɵɵclassProp(\"clickable\", ctx_r10.board.currentState == ctx_r10.playerToGameState(cell_r11.player))(\"pointer\", ctx_r10.board.currentState == ctx_r10.playerToGameState(cell_r11.player) && (!ctx_r10.isOnline || cell_r11.player == ctx_r10.currentPlayer));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", cell_r11.value == 4 && ctx_r10.board.canPlay(cell_r11.x, cell_r11.y - 1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", cell_r11.value == 4 && ctx_r10.board.canPlay(cell_r11.x, cell_r11.y + 1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", cell_r11.value == 4 && ctx_r10.board.canPlay(cell_r11.x + 1, cell_r11.y));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", cell_r11.value == 4 && ctx_r10.board.canPlay(cell_r11.x - 1, cell_r11.y));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.lastMove && cell_r11.x == ctx_r10.lastMove.x && cell_r11.y == ctx_r10.lastMove.y);\n  }\n}\nfunction BoardComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, BoardComponent_div_19_div_1_Template, 6, 11, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r9);\n  }\n}\nfunction BoardComponent_div_20_h6_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 38);\n    i0.ɵɵtext(1, \"Player 1 joined\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 38);\n    i0.ɵɵtext(1, \"Waiting for Player 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 39);\n    i0.ɵɵtext(1, \"Player 2 joined\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 39);\n    i0.ɵɵtext(1, \"Waiting for Player 2\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 40);\n    i0.ɵɵtext(1, \"Player 3 joined\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 40);\n    i0.ɵɵtext(1, \"Waiting for Player 3\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 41);\n    i0.ɵɵtext(1, \"Player 4 joined\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_h6_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\", 41);\n    i0.ɵɵtext(1, \"Waiting for Player 4\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"h1\", 31);\n    i0.ɵɵtext(2, \"Waiting for other players\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, BoardComponent_div_20_h6_3_Template, 2, 0, \"h6\", 32);\n    i0.ɵɵtemplate(4, BoardComponent_div_20_h6_4_Template, 2, 0, \"h6\", 32);\n    i0.ɵɵtemplate(5, BoardComponent_div_20_h6_5_Template, 2, 0, \"h6\", 33);\n    i0.ɵɵtemplate(6, BoardComponent_div_20_h6_6_Template, 2, 0, \"h6\", 33);\n    i0.ɵɵtemplate(7, BoardComponent_div_20_h6_7_Template, 2, 0, \"h6\", 34);\n    i0.ɵɵtemplate(8, BoardComponent_div_20_h6_8_Template, 2, 0, \"h6\", 34);\n    i0.ɵɵtemplate(9, BoardComponent_div_20_h6_9_Template, 2, 0, \"h6\", 35);\n    i0.ɵɵtemplate(10, BoardComponent_div_20_h6_10_Template, 2, 0, \"h6\", 35);\n    i0.ɵɵelementStart(11, \"div\")(12, \"label\", 36);\n    i0.ɵɵtext(13, \"Room ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"input\", 37);\n    i0.ɵɵlistener(\"click\", function BoardComponent_div_20_Template_input_click_14_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.copyToClipboard($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.noPlayer1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noPlayer1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.noPlayer2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noPlayer2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.noPlayer3 && ctx_r5.board.playersNumber >= 3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noPlayer3 && ctx_r5.board.playersNumber >= 3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.noPlayer4 && ctx_r5.board.playersNumber >= 4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noPlayer4 && ctx_r5.board.playersNumber >= 4);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", ctx_r5.roomID);\n  }\n}\nfunction BoardComponent_div_21_h1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 31);\n    i0.ɵɵtext(1, \"Player \");\n    i0.ɵɵelement(2, \"img\", 45);\n    i0.ɵɵtext(3, \" Won!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_21_h1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 31);\n    i0.ɵɵtext(1, \"Player \");\n    i0.ɵɵelement(2, \"img\", 46);\n    i0.ɵɵtext(3, \" Won!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_21_h1_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 31);\n    i0.ɵɵtext(1, \"Player \");\n    i0.ɵɵelement(2, \"img\", 47);\n    i0.ɵɵtext(3, \" Won!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_21_h1_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\", 31);\n    i0.ɵɵtext(1, \"Player \");\n    i0.ɵɵelement(2, \"img\", 48);\n    i0.ɵɵtext(3, \" Won!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtemplate(1, BoardComponent_div_21_h1_1_Template, 4, 0, \"h1\", 42);\n    i0.ɵɵtemplate(2, BoardComponent_div_21_h1_2_Template, 4, 0, \"h1\", 42);\n    i0.ɵɵtemplate(3, BoardComponent_div_21_h1_3_Template, 4, 0, \"h1\", 42);\n    i0.ɵɵtemplate(4, BoardComponent_div_21_h1_4_Template, 4, 0, \"h1\", 42);\n    i0.ɵɵelementStart(5, \"a\", 43)(6, \"button\", 44);\n    i0.ɵɵtext(7, \"Home Page\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.board.currentState == ctx_r6.GameState.PLAYER_1_WON);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.board.currentState == ctx_r6.GameState.PLAYER_2_WON);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.board.currentState == ctx_r6.GameState.PLAYER_3_WON);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.board.currentState == ctx_r6.GameState.PLAYER_4_WON);\n  }\n}\nfunction BoardComponent_div_22_h5_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\", 51);\n    i0.ɵɵtext(1, \" Your turn\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_22_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\", 51);\n    i0.ɵɵtext(1, \"Wait for your opponent\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, BoardComponent_div_22_h5_1_Template, 2, 0, \"h5\", 49);\n    i0.ɵɵtemplate(2, BoardComponent_div_22_ng_template_2_Template, 2, 0, \"ng-template\", null, 50, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r34 = i0.ɵɵreference(3);\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.board.currentState == ctx_r7.playerToGameState(ctx_r7.currentPlayer))(\"ngIfElse\", _r34);\n  }\n}\nfunction BoardComponent_app_chat_box_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chat-box\", 52);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"player\", ctx_r8.currentPlayer);\n  }\n}\n/**\n * @description\n * This is where all the magic happens.\n * The game logic and the Game-play lifecycle are declared in this component\n *\n * For more details about the board configuration, check board.model\n *\n * @author\n * Rafaa Seddik\n */\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    constructor(gameService, roomService) {\n      this.gameService = gameService;\n      this.roomService = roomService;\n      // Toggle if the game is online/offline\n      this.isOnline = false;\n      // Toggle if a player is disconnected\n      this.noPlayer1 = false;\n      this.noPlayer2 = true;\n      this.noPlayer3 = true;\n      this.noPlayer4 = true;\n      // a util function to Player.model to a GameState.model\n      this.playerToGameState = playerToGameState;\n      // Types declaration\n      this.GameState = GameState;\n      this.Player = Player;\n      // Players' scores\n      this.player1Score = 0;\n      this.player2Score = 0;\n      this.player3Score = 0;\n      this.player4Score = 0;\n      // Used to lock the board, to prevent clicking on the same cell more then once\n      this.boardLocked = false;\n    }\n    /**\n     * When initialising this component, subscribe to all the subjects declared in the Room.service\n     */\n    ngOnInit() {\n      this.updateScore();\n      if (this.isOnline) {\n        this.currentPlayer = this.gameService.curentPlayer;\n        this.roomID = this.roomService.roomID;\n        this.updateConnectedPlayersNumber();\n        /**\n         * Subscribe to player_X_Joined Event\n         */\n        this.roomService.playerOneJoined.asObservable().subscribe(joined => {\n          if (joined) {\n            if (this.noPlayer1 != false) {\n              this.noPlayer1 = false;\n              this.board.presentPlayers++;\n            }\n          } else {\n            if (this.noPlayer1 != true) {\n              this.noPlayer1 = true;\n              this.board.presentPlayers--;\n            }\n          }\n        });\n        this.roomService.playerTwoJoined.asObservable().subscribe(joined => {\n          if (joined) {\n            if (this.noPlayer2 != false) {\n              this.noPlayer2 = false;\n              this.board.presentPlayers++;\n            }\n          } else {\n            if (this.noPlayer2 != true) {\n              this.noPlayer2 = true;\n              this.board.presentPlayers--;\n            }\n          }\n        });\n        this.roomService.playerThreeJoined.asObservable().subscribe(joined => {\n          if (joined) {\n            if (this.noPlayer3 != false) {\n              this.noPlayer3 = false;\n              this.board.presentPlayers++;\n            }\n          } else {\n            if (this.noPlayer3 != true) {\n              this.noPlayer3 = true;\n              this.board.presentPlayers--;\n            }\n          }\n        });\n        this.roomService.playerFourJoined.asObservable().subscribe(joined => {\n          if (joined) {\n            if (this.noPlayer4 != false) {\n              this.noPlayer4 = false;\n              this.board.presentPlayers++;\n            }\n          } else {\n            if (this.noPlayer4 != true) {\n              this.noPlayer4 = true;\n              this.board.presentPlayers--;\n            }\n          }\n        });\n        /**\n         * Subscribe to the move Event and call incrementFromOtherPlayer if another player made the move\n         */\n        this.roomService.move.asObservable().subscribe(move => {\n          let movePlayer;\n          switch (move.player) {\n            case 1:\n              movePlayer = Player.PLAYER_1;\n              break;\n            case 2:\n              movePlayer = Player.PLAYER_2;\n              break;\n            case 3:\n              movePlayer = Player.PLAYER_3;\n              break;\n            case 4:\n              movePlayer = Player.PLAYER_4;\n              break;\n            default:\n              movePlayer = Player.PLAYER_2;\n          }\n          if (movePlayer != this.currentPlayer) {\n            this.incrementFromOtherPlayer(move.x, move.y, movePlayer);\n          }\n        });\n      }\n    }\n    /**\n     * @deprecated\n     * TODO : Remove this function\n     * @author\n     * Rafaa Seddik\n     */\n    updateConnectedPlayersNumber() {\n      this.roomService.getConnectedPlayers(this.roomID).then(nb => {\n        if (nb < this.board.presentPlayers) {\n          this.board.presentPlayers = nb;\n        }\n        if (this.board.presentPlayers < this.board.playersNumber) {\n          setTimeout(() => this.updateConnectedPlayersNumber(), 1000);\n        }\n      });\n    }\n    /**\n     * @description\n     * Copies the room ID into the clipboard\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    copyToClipboard(event) {\n      //TODO : Develop the copy into clipboard function\n    }\n    /**\n     * @description\n     * Updates the Game state to ANALYSING\n     * Returns the cells containing a value 4\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    analyse() {\n      this.board.currentState = GameState.ANALYSING;\n      const cells = _.flatten(this.board.playedCells).filter(cell => cell.player === Player.PLAYER_1 || cell.player === Player.PLAYER_2 || cell.player === Player.PLAYER_3 || cell.player === Player.PLAYER_4).filter(cell => cell.value === 4);\n      return cells;\n    }\n    /**\n     * @description\n     * Updates the Game state to UPDATING\n     * Explodes the exploding cells\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    update(cells, player) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield wait(500);\n        _this.board.currentState = GameState.UPDATING;\n        cells.forEach(cell => {\n          cell.explode();\n          _this.board.getCellNeighbors(cell).forEach(neighborCell => neighborCell.increment(player));\n        });\n      })();\n    }\n    /**\n     * @description\n     * Recursively analyse the and update the board until there is nothing to update.\n     * then update the game state to the next player role\n     *\n     * TODO : Optimise this function\n     * @author\n     * Rafaa Seddik\n     */\n    nextRole() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.board.currentState === GameState.PLAYER_1) {\n          let explosionCells = _this2.analyse();\n          while (explosionCells.length > 0) {\n            yield _this2.update(explosionCells, Player.PLAYER_1);\n            explosionCells = _this2.analyse();\n          }\n          if (_this2.isOnline && _this2.currentPlayer == Player.PLAYER_1) {\n            _this2.roomService.sendSerialBoard(_this2.board.serialize(), 1);\n          }\n          _this2.board.currentState = nextGameState(Player.PLAYER_1, _this2.board.playersNumber);\n        } else if (_this2.board.currentState === GameState.PLAYER_2) {\n          let explosionCells = _this2.analyse();\n          while (explosionCells.length > 0) {\n            yield _this2.update(explosionCells, Player.PLAYER_2);\n            explosionCells = _this2.analyse();\n          }\n          if (_this2.isOnline && _this2.currentPlayer == Player.PLAYER_2) {\n            _this2.roomService.sendSerialBoard(_this2.board.serialize(), 2);\n          }\n          _this2.board.currentState = nextGameState(Player.PLAYER_2, _this2.board.playersNumber);\n        } else if (_this2.board.currentState === GameState.PLAYER_3) {\n          let explosionCells = _this2.analyse();\n          while (explosionCells.length > 0) {\n            yield _this2.update(explosionCells, Player.PLAYER_3);\n            explosionCells = _this2.analyse();\n          }\n          if (_this2.isOnline && _this2.currentPlayer == Player.PLAYER_3) {\n            _this2.roomService.sendSerialBoard(_this2.board.serialize(), 3);\n          }\n          _this2.board.currentState = nextGameState(Player.PLAYER_3, _this2.board.playersNumber);\n        } else if (_this2.board.currentState === GameState.PLAYER_4) {\n          let explosionCells = _this2.analyse();\n          while (explosionCells.length > 0) {\n            yield _this2.update(explosionCells, Player.PLAYER_4);\n            explosionCells = _this2.analyse();\n          }\n          if (_this2.isOnline && _this2.currentPlayer == Player.PLAYER_4) {\n            _this2.roomService.sendSerialBoard(_this2.board.serialize(), 4);\n          }\n          _this2.board.currentState = nextGameState(Player.PLAYER_4, _this2.board.playersNumber);\n        }\n        _this2.updateScore();\n        if (_this2.board.lostPlayers.has(_this2.board.currentState) && _this2.board.lostPlayers.size != _this2.board.playersNumber - 1) {\n          _this2.nextRole();\n        }\n      })();\n    }\n    /**\n     * @description\n     * Used as an event handler when a cell is clicked\n     * It locks the board to prevent clicking on the same cell more then once\n     * If the game is online, broadcast the move, and go to next role\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    increment(cell) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3.lastMove = null;\n        if (playerToGameState(cell.player) == _this3.board.currentState && (!_this3.isOnline || _this3.currentPlayer == cell.player && !_this3.boardLocked)) {\n          if (_this3.isOnline) {\n            _this3.boardLocked = true;\n            _this3.roomService.emitMove(_this3.currentPlayer, cell).then(a => {\n              cell.increment(cell.player);\n              _this3.nextRole();\n            }).finally(() => {\n              _this3.boardLocked = false;\n            });\n          } else {\n            cell.increment(cell.player);\n            _this3.nextRole();\n          }\n        }\n      })();\n    }\n    /**\n     * @description\n     * Used to apply a move from another player in an online game\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    incrementFromOtherPlayer(x, y, player) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        let moveState = playerToGameState(player);\n        if (_this4.board.currentState === moveState && _this4.currentPlayer != player) {\n          _this4.lastMove = _this4.board.playedCells[y][x];\n          _this4.board.playedCells[y][x].increment(player);\n          _this4.nextRole();\n        }\n      })();\n    }\n    /**\n     * @description\n     * Calculates each players score\n     * If a player gets 0, it is registered as lost.\n     * If all players lose, except the winner, the game state is set to PLAYER_X_WON\n     *\n     * @author\n     * Rafaa Seddik\n     */\n    updateScore() {\n      this.player1Score = _.flatten(this.board.playedCells).filter(cell => cell.player === Player.PLAYER_1).length;\n      this.player2Score = _.flatten(this.board.playedCells).filter(cell => cell.player === Player.PLAYER_2).length;\n      if (this.board.playersNumber >= 3) {\n        this.player3Score = _.flatten(this.board.playedCells).filter(cell => cell.player === Player.PLAYER_3).length;\n      }\n      if (this.board.playersNumber == 4) {\n        this.player4Score = _.flatten(this.board.playedCells).filter(cell => cell.player === Player.PLAYER_4).length;\n      }\n      if (this.player1Score === 0 && !this.board.lostPlayers.has(GameState.PLAYER_1)) {\n        this.board.lostPlayers.add(GameState.PLAYER_1);\n      }\n      if (this.player2Score === 0 && !this.board.lostPlayers.has(GameState.PLAYER_2)) {\n        this.board.lostPlayers.add(GameState.PLAYER_2);\n      }\n      if (this.player3Score === 0 && !this.board.lostPlayers.has(GameState.PLAYER_3) && this.board.playersNumber > 2) {\n        this.board.lostPlayers.add(GameState.PLAYER_3);\n      }\n      if (this.player4Score === 0 && !this.board.lostPlayers.has(GameState.PLAYER_4) && this.board.playersNumber > 3) {\n        this.board.lostPlayers.add(GameState.PLAYER_4);\n      }\n      if (this.board.lostPlayers.size == this.board.playersNumber - 1) {\n        if (!this.board.lostPlayers.has(GameState.PLAYER_1)) {\n          this.board.currentState = GameState.PLAYER_1_WON;\n          this.roomService.removeSession();\n        } else if (!this.board.lostPlayers.has(GameState.PLAYER_2)) {\n          this.board.currentState = GameState.PLAYER_2_WON;\n          this.roomService.removeSession();\n        } else if (!this.board.lostPlayers.has(GameState.PLAYER_3)) {\n          this.board.currentState = GameState.PLAYER_3_WON;\n          this.roomService.removeSession();\n        } else if (!this.board.lostPlayers.has(GameState.PLAYER_4)) {\n          this.board.currentState = GameState.PLAYER_4_WON;\n          this.roomService.removeSession();\n        }\n      }\n    }\n    static #_ = this.ɵfac = function BoardComponent_Factory(t) {\n      return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.GameService), i0.ɵɵdirectiveInject(i2.RoomService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: BoardComponent,\n      selectors: [[\"app-board\"]],\n      inputs: {\n        isOnline: \"isOnline\",\n        board: \"board\"\n      },\n      decls: 24,\n      vars: 11,\n      consts: [[1, \"row\"], [1, \"col-12\", \"offset-sm-3\", \"col-sm-6\"], [1, \"scoreboard\"], [1, \"mt-2\"], [1, \"player-icon-holder\"], [\"src\", \"assets/img/cell/blue.png\", \"width\", \"30px\", \"height\", \"30px\"], [\"src\", \"assets/img/cell/red.png\", \"width\", \"30px\", \"height\", \"30px\"], [\"class\", \"player-icon-holder\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"col-12\"], [1, \"board-box\"], [\"class\", \"board-row\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"winning-overlay\", 4, \"ngIf\"], [\"class\", \"col-12 offset-sm-3 col-sm-6\", 4, \"ngIf\"], [3, \"player\", 4, \"ngIf\"], [\"src\", \"assets/img/cell/green.png\", \"width\", \"30px\", \"height\", \"30px\"], [\"src\", \"assets/img/cell/yellow.png\", \"width\", \"30px\", \"height\", \"30px\"], [1, \"board-row\"], [3, \"class\", \"clickable\", \"pointer\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [\"class\", \"cell-explosion cell-explosion-up\", 4, \"ngIf\"], [\"class\", \"cell-explosion cell-explosion-bottom\", 4, \"ngIf\"], [\"class\", \"cell-explosion cell-explosion-right\", 4, \"ngIf\"], [\"class\", \"cell-explosion cell-explosion-left\", 4, \"ngIf\"], [\"class\", \"lastMove\", 4, \"ngIf\"], [1, \"cell-explosion\", \"cell-explosion-up\"], [1, \"cell-explosion\", \"cell-explosion-bottom\"], [1, \"cell-explosion\", \"cell-explosion-right\"], [1, \"cell-explosion\", \"cell-explosion-left\"], [1, \"lastMove\"], [1, \"winning-overlay\"], [1, \"text-light\"], [\"class\", \"blue-color\", 4, \"ngIf\"], [\"class\", \"red-color\", 4, \"ngIf\"], [\"class\", \"green-color\", 4, \"ngIf\"], [\"class\", \"yellow-color\", 4, \"ngIf\"], [1, \"text-warning\"], [1, \"form-control\", \"mx-2\", 3, \"value\", \"click\"], [1, \"blue-color\"], [1, \"red-color\"], [1, \"green-color\"], [1, \"yellow-color\"], [\"class\", \"text-light\", 4, \"ngIf\"], [\"routerLink\", \"/home\"], [1, \"ml-2\", \"btn\", \"btn-outline-light\", \"px-2\"], [\"src\", \"assets/img/cell/blue.png\", \"width\", \"50px\", \"height\", \"50px\"], [\"src\", \"assets/img/cell/red.png\", \"width\", \"50px\", \"height\", \"50px\"], [\"src\", \"assets/img/cell/green.png\", \"width\", \"50px\", \"height\", \"50px\"], [\"src\", \"assets/img/cell/yellow.png\", \"width\", \"50px\", \"height\", \"50px\"], [\"class\", \"mt-2 text-dark text-center\", 4, \"ngIf\", \"ngIfElse\"], [\"opponent\", \"\"], [1, \"mt-2\", \"text-dark\", \"text-center\"], [3, \"player\"]],\n      template: function BoardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h4\", 3);\n          i0.ɵɵtext(4, \"Score\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4);\n          i0.ɵɵelement(6, \"img\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\");\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 4);\n          i0.ɵɵelement(10, \"img\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\");\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(13, BoardComponent_div_13_Template, 2, 0, \"div\", 7);\n          i0.ɵɵtemplate(14, BoardComponent_div_14_Template, 2, 1, \"div\", 8);\n          i0.ɵɵtemplate(15, BoardComponent_div_15_Template, 2, 0, \"div\", 7);\n          i0.ɵɵtemplate(16, BoardComponent_div_16_Template, 2, 1, \"div\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 9)(18, \"div\", 10);\n          i0.ɵɵtemplate(19, BoardComponent_div_19_Template, 2, 1, \"div\", 11);\n          i0.ɵɵtemplate(20, BoardComponent_div_20_Template, 15, 9, \"div\", 12);\n          i0.ɵɵtemplate(21, BoardComponent_div_21_Template, 8, 4, \"div\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(22, BoardComponent_div_22_Template, 4, 2, \"div\", 13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(23, BoardComponent_app_chat_box_23_Template, 1, 1, \"app-chat-box\", 14);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate(ctx.player1Score);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.player2Score);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.board.playersNumber > 2);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.board.playersNumber > 2);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.board.playersNumber > 3);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.board.playersNumber > 3);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.board.playedCells);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isOnline && ctx.board.playersNumber > ctx.board.presentPlayers);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.board.currentState == ctx.GameState.PLAYER_1_WON || ctx.board.currentState == ctx.GameState.PLAYER_2_WON || ctx.board.currentState == ctx.GameState.PLAYER_3_WON || ctx.board.currentState == ctx.GameState.PLAYER_4_WON);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isOnline);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isOnline);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink, i5.ChatBoxComponent],\n      encapsulation: 2\n    });\n  }\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}