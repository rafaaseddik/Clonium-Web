{"ast":null,"code":"import { Board } from 'src/app/shared/models/board.model';\nimport { RectangularAndSquaresLayout, RectangularLayout, TwoRectangulesLayout } from '../../shared/utils/board-layouts';\nimport { Cell } from '../../shared/models/cell.model';\nimport { Player } from '../../shared/models/player.model';\nimport { playerToNumber } from '../../shared/utils/utilFunctions';\nimport * as i0 from \"@angular/core\";\n/**\n * @description\n * This service is used to initialise the game and create the boards.\n *\n * @author\n * Rafaa Seddik\n */\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor() {}\n    /**\n     * @description\n     * Provided the board parameters, this method creates the Board object and saves it in the 'currentBoard' attribute\n     *\n     * @author\n     * Rafaa Seddik\n     *\n     *\n     * @param mapName\n     * The map template name, the game currently supports 3 templates : rect1, rect2, rect3\n     * @param playersNumber\n     * The number of player in the board, the game supports from 2 up to 4 players\n     * @param side\n     * The game is a square matrix, side is the matrix dimension (example : if side=3 => the board is a 3x3 matrix)\n     * @param empty\n     * Used to configure if the board should be initialised with the players cells\n     *    if(empty)   : no players cells initialisation\n     *    if(!empty)  : initialise the board with the players cells\n     */\n    createBoard(mapName, playersNumber, side = 8, empty = false) {\n      /**\n       * The result board\n       */\n      let newBoard;\n      /**\n       * OFFSETS :\n       * The game is a square matrix,\n       * offsetMin is the TOP and LEFT padding where putting the players cells\n       * offsetMax is the BOTTOM and RIGHT position where putting the players cells\n       */\n      let offsetMin = 1;\n      let offsetMax = 6;\n      switch (side) {\n        case 6:\n          offsetMin = 1;\n          offsetMax = 4;\n          break;\n        case 8:\n          offsetMin = 1;\n          offsetMax = 6;\n          break;\n        case 10:\n          offsetMin = mapName == 'rect3' ? 1 : 2;\n          offsetMax = mapName == 'rect3' ? 8 : 7;\n          break;\n        case 12:\n          offsetMin = mapName == 'rect3' ? 1 : 2;\n          offsetMax = mapName == 'rect3' ? 10 : 9;\n          break;\n      }\n      /**\n       * This part is used to initialise the board object with the corresponding mapName, side and number of players\n       */\n      switch (mapName) {\n        case 'rect1':\n          {\n            newBoard = new Board(side, side, RectangularLayout(side, side), playersNumber);\n            break;\n          }\n        case 'rect2':\n          {\n            newBoard = new Board(side, side, TwoRectangulesLayout(side, side, 2, 2), playersNumber);\n            break;\n          }\n        case 'rect3':\n          {\n            newBoard = new Board(side, side, RectangularAndSquaresLayout(side, side, side > 8 ? 2 : 1), playersNumber);\n            break;\n          }\n        default:\n          throw new Error('Map Name Undefined');\n      }\n      /**\n       * if the board is to be initalised as not empty, put the players cells in their corresponding position\n       */\n      if (!empty) {\n        newBoard.setCell(offsetMin, offsetMin, new Cell(offsetMin, offsetMin, Player.PLAYER_1, 3));\n        newBoard.setCell(offsetMax, offsetMax, new Cell(offsetMax, offsetMax, Player.PLAYER_2, 3));\n        if (playersNumber > 2) {\n          newBoard.setCell(offsetMax, offsetMin, new Cell(offsetMax, offsetMin, Player.PLAYER_3, 3));\n        }\n        if (playersNumber > 3) {\n          newBoard.setCell(offsetMin, offsetMax, new Cell(offsetMin, offsetMax, Player.PLAYER_4, 3));\n        }\n      }\n      /**\n       * Set the current board parameter\n       */\n      this.currentBoard = newBoard;\n    }\n    /**\n     * @description\n     * Used to configure this service for a newly created online board\n     *\n     * @author\n     * Rafaa Seddik\n     *\n     * @param mapName\n     * The map template name, the game currently supports 3 templates : rect1, rect2, rect3\n     * @param playersNumber\n     * The number of player in the board, the game supports from 2 up to 4 players\n     * @param side\n     * The game is a square matrix, side is the matrix dimension (example : if side=3 => the board is a 3x3 matrix)\n     *\n     */\n    createOnlineBoard(mapName, playersNumber, side) {\n      this.curentPlayer = Player.PLAYER_1;\n      this.createBoard(mapName, playersNumber, side);\n      this.currentBoard.presentPlayers = 1;\n    }\n    /**\n     * @description\n     * Used to configure this service to join an already created board\n     * Either by joining for the first time\n     * Or to rejoin a game that the current used has disconnected from.\n     *\n     * @author\n     * Rafaa Seddik\n     *\n     * @param mapName\n     * * The map template name, the game currently supports 3 templates : rect1, rect2, rect3\n     * @param playersNumber\n     * The number of player in the board, the game supports from 2 up to 4 players\n     * @param currentPlayer\n     * The current player number\n     * @param side\n     * The game is a square matrix, side is the matrix dimension (example : if side=3 => the board is a 3x3 matrix)\n     * @param serialBoard (optional: only used when rejoining an old game)\n     * When rejoining an old game, this parameter contains a serialized version for the board state (the players' cells positions)\n     * @param gameState (optional: only used when rejoining an old game)\n     * When rejoining an old game, this parameter contains the current game state (who's turn is it)\n     */\n    joinOnlineBoard(mapName, playersNumber, currentPlayer, side, serialBoard = \"\", gameState = null) {\n      this.curentPlayer = currentPlayer;\n      if (serialBoard.length > 0) {\n        /**\n         * The code is accessed when rejoining a room\n         */\n        this.createBoard(mapName, playersNumber, side, true);\n        this.currentBoard.deserialize(serialBoard);\n        this.currentBoard.currentState = gameState;\n      } else {\n        /**\n         * The code is accessed when joining a room for the first time\n         */\n        this.createBoard(mapName, playersNumber, side);\n      }\n      // TODO : Check this line of code position\n      this.currentBoard.presentPlayers = playerToNumber(currentPlayer);\n    }\n    static #_ = this.ɵfac = function GameService_Factory(t) {\n      return new (t || GameService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GameService,\n      factory: GameService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}