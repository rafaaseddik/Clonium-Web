{"ast":null,"code":"/**\n * This utilities file contains the functions that generate the Board.PlayableCells matrix\n */\nexport const MAX_WIDTH = 12;\nexport const MAX_HEIGHT = 12;\nfunction initialBoard(width, height) {\n  return Array(height).fill(Array(width).fill(false));\n}\n/**\n * @description\n * The rect1 template\n *\n * @author\n * Ahmed Khalil Seddik\n */\nexport function RectangularLayout(width, height) {\n  if (width <= 0 || width > MAX_WIDTH) {\n    throw new RangeError(`Width must be between 1 and ${MAX_WIDTH} inclusive`);\n  }\n  if (height <= 0 || height > MAX_HEIGHT) {\n    throw new RangeError(`Height must be between 1 and ${MAX_HEIGHT} inclusive`);\n  }\n  let offset_x = 0;\n  let offset_y = 0;\n  return initialBoard(width, height).map((row, y) => row.map((cell, x) => {\n    if (x < offset_x || y < offset_y || x - offset_x >= width || y - offset_y >= height) {\n      return false;\n    } else {\n      return true;\n    }\n  }));\n}\n/**\n * @description\n * The rect2 template\n *\n * @author\n * Ahmed Khalil Seddik\n */\nexport function TwoRectangulesLayout(w1, h1, w2, h2) {\n  if (w1 <= 0 || w1 > MAX_WIDTH) {\n    throw new RangeError(`Width must be between 1 and ${MAX_WIDTH} inclusive`);\n  }\n  if (h1 <= 0 || h2 > MAX_HEIGHT) {\n    throw new RangeError(`Height must be between 1 and ${MAX_HEIGHT} inclusive`);\n  }\n  let offset_x = 0;\n  let offset_y = 0;\n  let offset_x1 = Math.floor((w1 - w2) / 2) + offset_x;\n  let offset_y1 = Math.floor((h1 - h2) / 2) + offset_y;\n  return initialBoard(w1, h1).map((row, y) => row.map((cell, x) => {\n    if (x < offset_x || y < offset_y || x - offset_x >= w1 || y - offset_y >= h1) {\n      return false;\n    } else if (x < offset_x1 || y < offset_y1 || x - offset_x1 >= w2 || y - offset_y1 >= h2) {\n      return true;\n    } else {\n      return false;\n    }\n  }));\n}\n/**\n * @description\n * The rect3 template\n *\n * @author\n * Ahmed Khalil Seddik\n */\nexport function RectangularAndSquaresLayout(width, height, squareSide) {\n  if (width <= 0 || width > MAX_WIDTH) {\n    throw new RangeError(`Width must be between 1 and ${MAX_WIDTH} inclusive`);\n  }\n  if (height <= 0 || height > MAX_HEIGHT) {\n    throw new RangeError(`Height must be between 1 and ${MAX_HEIGHT} inclusive`);\n  }\n  let offset_x = 0;\n  let offset_y = 0;\n  let offset_x1 = Math.floor(4 / 2) + offset_x;\n  let offset_y1 = Math.floor(4 / 2) + offset_y;\n  return initialBoard(width, height).map((row, y) => row.map((cell, x) => {\n    if (x < offset_x || y < offset_y || x - offset_x >= width || y - offset_y >= height) {\n      return false;\n    } else if (x < offset_x1 || y < offset_y1 || x - offset_x1 >= width - 4 || y - offset_y1 >= height - 4) {\n      return true;\n    } else if (x >= offset_x + 2 + squareSide && x < offset_x + width - 2 - squareSide || y >= offset_y + 2 + squareSide && y < offset_y + height - 2 - squareSide) {\n      return true;\n    } else {\n      return false;\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}